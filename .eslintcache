[{"/Users/xuting/workspace/czl/qr/src/App.tsx":"1","/Users/xuting/workspace/czl/qr/src/reportWebVitals.ts":"2","/Users/xuting/workspace/czl/qr/src/index.tsx":"3"},{"size":8782,"mtime":1614066999480,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1612345704344,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1612345704343,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"p53su7",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/xuting/workspace/czl/qr/src/App.tsx",["15","16"],"import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Button, ConfigProvider, Slider} from 'antd';\n\nimport zhCN from 'antd/es/locale/zh_CN';\nimport 'antd/dist/antd.css';\nimport { Input, Upload } from 'antd';\nimport useForceUpdate from \"antd/es/_util/hooks/useForceUpdate\";\n\nconst { TextArea } = Input;\n\nconst QRCode = require('qrcode');\n\nlet mouseDown = false;\nlet posX = 0; let posY = 0; let lastPageX = 0; let lastPageY = 0;\nlet posX_T = 0; let posY_T = 0; let lastPageX_T = 0; let lastPageY_T = 0;\n\n// 存放 qr img element map <index, element>\nconst qrImgElementArr: any = {};\n// 存放 qr text element map <index, element>\nconst qrTextElementArr: any = {};\n\n// 二维码大小\nlet qrWidth = 80;\n\n// 背景图宽度\nconst bgWidth = 400;\n\n// 存放 qr 文字 map <index, text>\nconst qrTextMap: any = {};\n\nlet timeoutId = 0;\n\nfunction App() {\n\n  const [ text, setText ] = useState<string>('风急天高猿啸哀\\n渚清沙白鸟飞回');\n  const [ showQrCode, setShowQrCode ] = useState(false);\n  const [ bgBase64, setBgBase64 ] = useState<string>('');\n  const [ showText, setShowText ] = useState(false);\n  const [ textColor, setTextColor ] = useState('black');\n\n  const forceUpdate = useForceUpdate();\n\n  const getTextUrls = () => {\n    if (!text) return [];\n    return text.split('\\n');\n  };\n\n  const submit = () => {\n    const arr = getTextUrls();\n    if (arr.length > 0) {\n      setShowQrCode(true);\n      setTimeout(() => {\n        arr.forEach((text, index) => {\n          if (text) {\n            // 显示二维码\n            QRCode.toCanvas(document.getElementById(`${text}_${index}`), text, {\n              width: qrWidth,\n              margin: 2,\n            }, function (error: Error) {\n              if (error) console.error(error);\n            });\n            // 设置 ElementArr\n            const qrElId = `canvas_container_${index}`;\n            qrImgElementArr[index] = document.querySelector(`#${qrElId}`);\n            const qrTextElId = `qr_text_${index}`;\n            qrTextElementArr[index] = document.querySelector(`#${qrTextElId}`);\n          }\n        });\n      }, 500);\n    } else {\n      setShowQrCode(false);\n    }\n  };\n\n  const beforeUpload = (file: File) => {\n    // file 对象转 base64\n    // 声明js的文件流\n    const reader = new FileReader();\n    if (file){\n      // 通过文件流将文件转换成Base64字符串\n      reader.readAsDataURL(file);\n      // 转换成功事件函数\n      reader.onloadend = () => {\n        setBgBase64(reader.result as string);\n      }\n    }\n    return false;\n  };\n\n  const onMouseDown = (e: MouseEvent, type: 'img' | 'text') => {\n    mouseDown = true;\n    const {pageX, pageY} = e;\n    if (type === 'img') {\n      lastPageX = pageX;\n      lastPageY = pageY;\n    } else {\n      lastPageX_T = pageX;\n      lastPageY_T = pageY;\n    }\n  };\n\n  const qrMove = (e: MouseEvent, type: 'img' | 'text') => {\n    if (bgBase64 && mouseDown) {\n      const {pageX, pageY} = e;\n\n      if (type === 'img') {\n        let offsetX = pageX - lastPageX;\n        let offsetY = pageY - lastPageY;\n        posX += offsetX;\n        posY += offsetY;\n\n        Object.keys(qrImgElementArr).forEach(key => {\n          const el = qrImgElementArr[key];\n          if (el) {\n            el.style.left = `${posX}px`;\n            el.style.top = `${posY}px`;\n          }\n        });\n\n        lastPageX = pageX;\n        lastPageY = pageY;\n\n      } else if (type === 'text') {\n        let offsetX = pageX - lastPageX_T;\n        let offsetY = pageY - lastPageY_T;\n        posX_T += offsetX;\n        posY_T += offsetY;\n\n        Object.keys(qrTextElementArr).forEach(key => {\n          const el = qrTextElementArr[key];\n          if (el) {\n            el.style.left = `${posX_T}px`;\n            el.style.top = `${posY_T}px`;\n          }\n        });\n\n        lastPageX_T = pageX;\n        lastPageY_T = pageY;\n      }\n    }\n  };\n\n  const onTextChange = (value: string, index: number) => {\n    clearTimeout(timeoutId);\n    // @ts-ignore\n    timeoutId = setTimeout(() => {\n      qrTextMap[index] = value;\n      forceUpdate();\n    }, 500);\n  };\n\n  useEffect(() => {\n    window.addEventListener('mouseup', () => {\n      mouseDown = false;\n    });\n  }, []);\n\n  return (\n    <ConfigProvider locale={zhCN}>\n      <div className=\"App\">\n        <div className=\"left\">\n          <TextArea\n            placeholder='输入地址，换行分开'\n            value={text}\n            onChange={(params: { target: { value: string } }) => {\n              setText(params.target.value || '');\n            }}\n            style={{\n              height: 200,\n            }}\n          />\n          <Button\n            size='large'\n            type='primary'\n            onClick={submit}\n            style={{\n              marginTop: 20,\n              alignSelf: 'center',\n            }}\n          >生成二维码</Button>\n          {showQrCode && (\n            <div style={{marginTop: 40}}>\n              <Upload beforeUpload={beforeUpload}>\n                <Button>选择背景图</Button>\n              </Upload>\n            </div>\n          )}\n          {showQrCode && (\n            <div style={{marginTop: 40}}>\n              <span>调整二维码大小</span>\n              <Slider\n                min={60}\n                max={200}\n                defaultValue={qrWidth}\n                onAfterChange={(value: number) => {\n                  qrWidth = value;\n                  submit();\n                }}\n              />\n            </div>\n          )}\n          {bgBase64 && (\n            <div style={{marginTop: 40}}>\n              <Button\n                onClick={() => setShowText(true)}\n                style={{width: 100}}\n              >添加文字</Button>\n              {showText && (\n                <>\n                  <p style={{marginTop: 10}}>文字颜色</p>\n                  <div style={{display: \"flex\"}}>\n                    {['black', 'blue', 'orange', 'red'].map((item, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          width: 40, height: 40,\n                          marginRight: 10, marginBottom: 10,\n                          backgroundColor: item,\n                          cursor: \"pointer\",\n                        }}\n                        onClick={() => setTextColor(item)}\n                      />\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"right\">\n          {showQrCode && getTextUrls().length > 0 && getTextUrls().map((text, index) => {\n            return text && (\n              <div\n                key={index}\n                style={{\n                  marginBottom: 40,\n                  position: \"relative\",\n                }}\n              >\n                {bgBase64 && (\n                  <img\n                    src={bgBase64}\n                    style={{\n                      width: bgWidth,\n                    }}\n                  />\n                )}\n                <div\n                  id={`canvas_container_${index}`}\n                  style={{\n                    zIndex: 99,\n                    position: bgBase64 ? \"absolute\" : \"relative\",\n                    top: 0,\n                    left: 0,\n                    cursor: 'move',\n                  }}\n                  // @ts-ignore\n                  onMouseDown={e => onMouseDown(e, 'img')}\n                  // @ts-ignore\n                  onMouseMove={(e) => qrMove(e, 'img')}\n                >\n                  <canvas id={`${text}_${index}`} />\n                </div>\n                <span\n                  id={`qr_text_${index}`}\n                  style={{\n                    zIndex: 99,\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    fontSize: 18,\n                    whiteSpace: \"pre-wrap\",\n                    cursor: 'move',\n                    color: textColor,\n                  }}\n                  // @ts-ignore\n                  onMouseDown={e => onMouseDown(e, 'text')}\n                  // @ts-ignore\n                  onMouseMove={(e) => qrMove(e, 'text')}\n                >{qrTextMap[index] || ''}</span>\n                {showText && bgBase64 && (\n                  <TextArea\n                    style={{\n                      marginTop: 20,\n                      width: bgWidth,\n                      height: 120,\n                    }}\n                    placeholder={text}\n                    onChange={(e) => onTextChange(e.target.value, index)}\n                  />\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","/Users/xuting/workspace/czl/qr/src/reportWebVitals.ts",[],"/Users/xuting/workspace/czl/qr/src/index.tsx",[],{"ruleId":"17","severity":1,"message":"18","line":1,"column":16,"nodeType":"19","messageId":"20","endLine":1,"endColumn":27},{"ruleId":"21","severity":1,"message":"22","line":242,"column":19,"nodeType":"23","endLine":247,"endColumn":21},"@typescript-eslint/no-unused-vars","'ChangeEvent' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]