{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextArea","Input","QRCode","require","App","useState","text","setText","showQrCode","setShowQrCode","bgBase64","setBgBase64","getTextUrls","split","locale","zhCN","className","placeholder","value","onChange","params","target","style","height","size","type","onClick","arr","length","setTimeout","forEach","index","toCanvas","document","getElementById","width","margin","error","console","marginTop","alignSelf","rotate","beforeUpload","file","reader","FileReader","readAsDataURL","onloadend","result","map","marginBottom","position","src","objectFit","opacity","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+QASQA,EAAaC,IAAbD,SAEFE,EAASC,EAAQ,KAiHRC,MA7Gf,WAAgB,IAAD,EAEaC,mBAAiB,8DAF9B,mBAELC,EAFK,KAECC,EAFD,OAGyBF,oBAAS,GAHlC,mBAGLG,EAHK,KAGOC,EAHP,OAIqBJ,mBAAiB,IAJtC,mBAILK,EAJK,KAIKC,EAJL,KAMPC,EAAc,WAClB,OAAKN,EACEA,EAAKO,MAAM,MADA,IAyBpB,OACE,cAAC,IAAD,CAAgBC,OAAQC,IAAxB,SACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,cAAChB,EAAD,CACEiB,YAAY,yDACZC,MAAOZ,EACPa,SAAU,SAACC,GACTb,EAAQa,EAAOC,OAAOH,OAAS,KAEjCI,MAAO,CACLC,OAAQ,OAGZ,cAAC,IAAD,CACEC,KAAK,QACLC,KAAK,UACLC,QAtCK,WACb,IAAMC,EAAMf,IACRe,EAAIC,OAAS,GACfnB,GAAc,GACdoB,YAAW,WACTF,EAAIG,SAAQ,SAACxB,EAAMyB,GACbzB,GACFJ,EAAO8B,SAASC,SAASC,eAAT,UAA2B5B,EAA3B,YAAmCyB,IAAUzB,EAAM,CACjE6B,MArBA,IAsBAC,OAAQ,IACP,SAAUC,GACPA,GAAOC,QAAQD,MAAMA,WAI9B,MAEH5B,GAAc,IAsBRa,MAAO,CACLa,MAAO,IACPI,UAAW,GACXC,UAAW,UAPf,0BAUA,qBAAKlB,MAAO,CAACiB,UAAW,IAAxB,SACE,cAAC,IAAD,CAASE,QAAM,EAAf,SACE,cAAC,IAAD,CACEC,aAAc,SAAAC,GAGZ,IAAMC,EAAS,IAAIC,WASnB,OARIF,IAEFC,EAAOE,cAAcH,GAErBC,EAAOG,UAAY,WACjBpC,EAAYiC,EAAOI,WAGhB,GAbX,SAgBE,cAAC,IAAD,sDAKR,qBAAKhC,UAAU,QAAf,SACGR,GAAcI,IAAcgB,OAAS,GAAKhB,IAAcqC,KAAI,SAAC3C,EAAMyB,GAClE,OAAOzB,GACL,sBAEEgB,MAAO,CAAC4B,aAAc,GAAIC,SAAU,YAFtC,UAIGzC,GACC,qBACE0C,IAAK1C,EACLY,MAAO,CACL6B,SAAU,WACVhB,MA7FR,IA8FQZ,OA9FR,IA+FQ8B,UAAW,WAIjB,qBAAK/B,MAAO,CAACgC,QAAS5C,EAAW,GAAM,GAAvC,SACE,wBAAQ6C,GAAE,UAAKjD,EAAL,YAAayB,SAfpBA,cCpFNyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BsB,M","file":"static/js/main.13cec711.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {Button, ConfigProvider} from 'antd';\n\nimport zhCN from 'antd/es/locale/zh_CN';\nimport 'antd/dist/antd.css';\nimport { Input, Upload } from 'antd';\nimport ImgCrop from 'antd-img-crop';\n\nconst { TextArea } = Input;\n\nconst QRCode = require('qrcode');\n\nconst WIDTH = 200;\n\nfunction App() {\n\n  const [ text, setText ] = useState<string>('陈志磊\\n张树华\\n陈世超');\n  const [ showQrCode, setShowQrCode ] = useState(false);\n  const [ bgBase64, setBgBase64 ] = useState<string>('');\n\n  const getTextUrls = () => {\n    if (!text) return [];\n    return text.split('\\n');\n  };\n\n  const submit = () => {\n    const arr = getTextUrls();\n    if (arr.length > 0) {\n      setShowQrCode(true);\n      setTimeout(() => {\n        arr.forEach((text, index) => {\n          if (text) {\n            QRCode.toCanvas(document.getElementById(`${text}_${index}`), text, {\n              width: WIDTH,\n              margin: 0,\n            }, function (error: Error) {\n              if (error) console.error(error);\n            })\n          }\n        });\n      }, 1000);\n    } else {\n      setShowQrCode(false);\n    }\n  };\n\n  return (\n    <ConfigProvider locale={zhCN}>\n      <div className=\"App\">\n        <div className=\"left\">\n          <TextArea\n            placeholder='输入地址，换行分开'\n            value={text}\n            onChange={(params: { target: { value: string } }) => {\n              setText(params.target.value || '');\n            }}\n            style={{\n              height: 200,\n            }}\n          />\n          <Button\n            size='large'\n            type='primary'\n            onClick={submit}\n            style={{\n              width: 100,\n              marginTop: 20,\n              alignSelf: 'center',\n            }}\n          >提交</Button>\n          <div style={{marginTop: 40}}>\n            <ImgCrop rotate>\n              <Upload\n                beforeUpload={file => {\n                  // file 对象转 base64\n                  // 声明js的文件流\n                  const reader = new FileReader();\n                  if (file){\n                    // 通过文件流将文件转换成Base64字符串\n                    reader.readAsDataURL(file);\n                    // 转换成功事件函数\n                    reader.onloadend = () => {\n                      setBgBase64(reader.result as string);\n                    }\n                  }\n                  return false;\n                }}\n              >\n                <Button>选择背景图</Button>\n              </Upload>\n            </ImgCrop>\n          </div>\n        </div>\n        <div className=\"right\">\n          {showQrCode && getTextUrls().length > 0 && getTextUrls().map((text, index) => {\n            return text && (\n              <div\n                key={index}\n                style={{marginBottom: 40, position: \"relative\"}}\n              >\n                {bgBase64 && (\n                  <img\n                    src={bgBase64}\n                    style={{\n                      position: \"absolute\",\n                      width: WIDTH,\n                      height: WIDTH,\n                      objectFit: \"cover\",\n                    }}\n                  />\n                )}\n                <div style={{opacity: bgBase64 ? 0.6 : 1}}>\n                  <canvas id={`${text}_${index}`} />\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}